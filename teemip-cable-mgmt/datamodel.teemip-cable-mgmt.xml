<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="3.0">
  <classes>
    <class id="CableType" _delta="define">
      <parent>Typology</parent>
      <properties>
        <category>bizmodel,searchable,configmgmt</category>
        <abstract>false</abstract>
        <key_type>autoincrement</key_type>
        <db_table>cabletype</db_table>
        <db_key_field>id</db_key_field>
        <db_final_class_field/>
        <naming>
          <attributes>
            <attribute id="name"/>
          </attributes>
        </naming>
        <icon/>
        <reconciliation>
          <attributes>
            <attribute id="name"/>
          </attributes>
        </reconciliation>
        <uniqueness_rules>
          <rule id="name">
            <attributes>
              <attribute id="name"/>
            </attributes>
            <filter/>
            <disabled>false</disabled>
            <is_blocking>true</is_blocking>
          </rule>
        </uniqueness_rules>
      </properties>
      <fields>
        <field id="description" xsi:type="AttributeText">
          <sql>description</sql>
          <default_value/>
          <is_null_allowed>true</is_null_allowed>
        </field>
        <field id="cablecategories_list" xsi:type="AttributeLinkedSet">
          <linked_class>CableCategory</linked_class>
          <ext_key_to_me>cabletype_id</ext_key_to_me>
          <edit_mode>none</edit_mode>
          <count_min>0</count_min>
          <count_max>0</count_max>
          <duplicates/>
        </field>
      </fields>
      <methods/>
      <presentation>
        <details>
          <items>
            <item id="cablecategories_list">
              <rank>10</rank>
            </item>
            <item id="name">
              <rank>20</rank>
            </item>
            <item id="description">
              <rank>30</rank>
            </item>
          </items>
        </details>
        <list>
          <items>
            <item id="description">
              <rank>20</rank>
            </item>
          </items>
        </list>
        <default_search>
          <items>
            <item id="name">
              <rank>10</rank>
            </item>
            <item id="description">
              <rank>20</rank>
            </item>
          </items>
        </default_search>
        <search>
          <items>
            <item id="name">
              <rank>10</rank>
            </item>
            <item id="description">
              <rank>20</rank>
            </item>
          </items>
        </search>
      </presentation>
    </class>
    <class id="CableCategory" _delta="define">
      <parent>Typology</parent>
      <properties>
        <category>bizmodel,searchable,configmgmt</category>
        <abstract>false</abstract>
        <key_type>autoincrement</key_type>
        <db_table>cablecategory</db_table>
        <db_key_field>id</db_key_field>
        <db_final_class_field/>
        <naming>
          <attributes>
            <attribute id="name"/>
          </attributes>
        </naming>
        <icon/>
        <reconciliation>
          <attributes>
            <attribute id="name"/>
          </attributes>
        </reconciliation>
        <uniqueness_rules>
          <rule id="name">
            <attributes>
              <attribute id="name"/>
            </attributes>
            <filter/>
            <disabled>false</disabled>
            <is_blocking>true</is_blocking>
          </rule>
        </uniqueness_rules>
      </properties>
      <fields>
        <field id="description" xsi:type="AttributeText">
          <sql>description</sql>
          <default_value/>
          <is_null_allowed>true</is_null_allowed>
        </field>
        <field id="cabletype_id" xsi:type="AttributeExternalKey">
          <sql>cabletype_id</sql>
          <filter><![CDATA[SELECT CableType]]></filter>
          <dependencies/>
          <target_class>CableType</target_class>
          <is_null_allowed>false</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="cabletype_name" xsi:type="AttributeExternalField">
          <extkey_attcode>cabletype_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
      </fields>
      <methods/>
      <presentation>
        <details>
          <items>
            <item id="name">
              <rank>10</rank>
            </item>
            <item id="cabletype_id">
              <rank>20</rank>
            </item>
            <item id="description">
              <rank>30</rank>
            </item>
          </items>
        </details>
        <list>
          <items>
            <item id="cabletype_id">
              <rank>10</rank>
            </item>
            <item id="description">
              <rank>20</rank>
            </item>
          </items>
        </list>
        <default_search>
          <items>
            <item id="name">
              <rank>10</rank>
            </item>
            <item id="cabletype_id">
              <rank>20</rank>
            </item>
            <item id="description">
              <rank>30</rank>
            </item>
          </items>
        </default_search>
        <search>
          <items>
            <item id="name">
              <rank>10</rank>
            </item>
            <item id="cabletype_id">
              <rank>20</rank>
            </item>
            <item id="description">
              <rank>30</rank>
            </item>
          </items>
        </search>
      </presentation>
    </class>
    <class id="NetworkCable" _delta="define">
      <parent>cmdbAbstractObject</parent>
      <properties>
        <category>bizmodel,searchable,configmgmt</category>
        <abstract>false</abstract>
        <key_type>autoincrement</key_type>
        <db_table>networkcable</db_table>
        <db_key_field>id</db_key_field>
        <db_final_class_field/>
        <naming>
          <attributes>
            <attribute id="networksocket1_name"/>
            <attribute id="networksocket2_name"/>
          </attributes>
        </naming>
        <style>
          <icon>assets/img/icons8-network-cable.svg</icon>
        </style>
        <reconciliation>
          <attributes>
            <attribute id="networksocket1_id"/>
            <attribute id="networksocket2_id"/>
          </attributes>
        </reconciliation>
        <uniqueness_rules/>
      </properties>
      <fields>
        <field id="cabletype_id" xsi:type="AttributeExternalKey">
          <sql>cabletype_id</sql>
          <filter><![CDATA[SELECT CableType]]></filter>
          <dependencies/>
          <target_class>CableType</target_class>
          <is_null_allowed>true</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="cabletype_name" xsi:type="AttributeExternalField">
          <extkey_attcode>cabletype_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
        <field id="cablecategory_id" xsi:type="AttributeExternalKey">
          <sql>cablecategory_id</sql>
          <filter><![CDATA[SELECT CableCategory WHERE cabletype_id = :this->cabletype_id]]></filter>
          <dependencies>
            <attribute id="cabletype_id"/>
          </dependencies>
          <target_class>CableCategory</target_class>
          <is_null_allowed>true</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="cablecategory_name" xsi:type="AttributeExternalField">
          <extkey_attcode>cablecategory_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
        <field id="length" xsi:type="AttributeString">
          <sql>length</sql>
          <default_value/>
          <is_null_allowed>true</is_null_allowed>
        </field>
        <field id="networksocket1_id" xsi:type="AttributeExternalKey">
          <sql>networksocket1_id</sql>
          <filter><![CDATA[SELECT NetworkSocket]]></filter>
          <dependencies/>
          <target_class>NetworkSocket</target_class>
          <is_null_allowed>false</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="networksocket1_name" xsi:type="AttributeExternalField">
          <extkey_attcode>networksocket1_id</extkey_attcode>
          <target_attcode>friendlyname</target_attcode>
        </field>
        <field id="networksocket2_id" xsi:type="AttributeExternalKey">
          <sql>networksocket2_id</sql>
          <filter><![CDATA[SELECT NetworkSocket AS ns2 JOIN NetworkSocket AS ns1 ON ns1.networksocket_id = ns2.id WHERE ns1.id = :this->networksocket1_id]]></filter>
          <dependencies>
            <attribute id="networksocket1_id"/>
          </dependencies>
          <target_class>NetworkSocket</target_class>
          <is_null_allowed>false</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="networksocket2_name" xsi:type="AttributeExternalField">
          <extkey_attcode>networksocket2_id</extkey_attcode>
          <target_attcode>friendlyname</target_attcode>
        </field>
      </fields>
      <methods>
        <method id="DoCheckToWrite">
          <comment/>
          <static>false</static>
          <access>public</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[	public function DoCheckToWrite()
    {
        parent::DoCheckToWrite();

        if ($this->IsNew()) {
            $sOQL = "SELECT NetworkCable AS nc WHERE (nc.networksocket1_id = :ns1_id AND nc.networksocket2_id = :ns2_id) OR (nc.networksocket1_id = :ns2_id AND nc.networksocket2_id = :ns1_id)";
        } else {
            $sOQL = "SELECT NetworkCable AS nc WHERE (nc.networksocket1_id = :ns1_id AND nc.networksocket2_id = :ns2_id AND nc.id != :id) OR (nc.networksocket1_id = :ns2_id AND nc.networksocket2_id = :ns1_id AND nc.id != :id)";
        }
        $oNetworkCableSet =  new CMDBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('ns1_id' => $this->Get('networksocket1_id'), 'ns2_id' => $this->Get('networksocket2_id'), 'id' =>$this->GetKey()));
        if ($oNetworkCableSet->CountExceeds(0)) {
            // A cable already connects the 2 selected network sockets
            $this->m_aCheckIssues[] = Dict::Format('UI:CableManagement:Action:CreateOrUpdate:NetworkCable:Duplicate');
        }
	}]]></code>
        </method>
      </methods>
      <presentation>
        <details>
          <items>
            <item id="col:col1">
              <rank>10</rank>
              <items>
                <item id="fieldset:Class:NetworkCable:baseinfo">
                  <rank>10</rank>
                  <items>
                    <item id="networksocket1_id">
                      <rank>10</rank>
                    </item>
                    <item id="networksocket2_id">
                      <rank>20</rank>
                    </item>
                    <item id="cabletype_id">
                      <rank>30</rank>
                    </item>
                    <item id="cablecategory_id">
                      <rank>40</rank>
                    </item>
                     <item id="length">
                      <rank>50</rank>
                    </item>
                  </items>
                </item>
              </items>
            </item>
          </items>
        </details>
        <list>
          <items>
            <item id="networksocket1_id">
              <rank>10</rank>
            </item>
            <item id="networksocket2_id">
              <rank>20</rank>
            </item>
            <item id="cabletype_id">
              <rank>30</rank>
            </item>
            <item id="cablecategory_id">
              <rank>40</rank>
            </item>
             <item id="length">
              <rank>50</rank>
            </item>
          </items>
        </list>
        <default_search>
          <items>
            <item id="networksocket1_id">
              <rank>10</rank>
            </item>
            <item id="networksocket2_id">
              <rank>20</rank>
            </item>
            <item id="cabletype_id">
              <rank>30</rank>
            </item>
            <item id="cablecategory_id">
              <rank>40</rank>
            </item>
             <item id="length">
              <rank>50</rank>
            </item>
          </items>
        </default_search>
        <search>
          <items>
            <item id="networksocket1_id">
              <rank>10</rank>
            </item>
            <item id="networksocket2_id">
              <rank>20</rank>
            </item>
            <item id="cabletype_id">
              <rank>30</rank>
            </item>
            <item id="cablecategory_id">
              <rank>40</rank>
            </item>
             <item id="length">
              <rank>50</rank>
            </item>
          </items>
        </search>
      </presentation>
    </class>
    <class id="NetworkSocket" _delta="define">
      <parent>NetworkInterface</parent>
      <properties>
        <category>bizmodel,searchable,configmgmt</category>
        <abstract>false</abstract>
        <key_type>autoincrement</key_type>
        <db_table>networksocket</db_table>
        <db_key_field>id</db_key_field>
        <db_final_class_field/>
        <naming>
          <attributes>
            <attribute id="name"/>
          </attributes>
        </naming>
        <fields_semantic>
          <state_attribute>status</state_attribute>
        </fields_semantic>
        <style>
          <icon>assets/img/icons8-wired-network.svg</icon>
        </style>
        <reconciliation>
          <attributes>
            <attribute id="name"/>
            <attribute id="location_id"/>
            <attribute id="location_name"/>
            <attribute id="rack_id"/>
            <attribute id="rack_name"/>
            <attribute id="patchpanel_id"/>
            <attribute id="patchpanel_name"/>
          </attributes>
        </reconciliation>
        <uniqueness_rules/>
      </properties>
      <fields>
        <field id="code" xsi:type="AttributeString">
          <sql>code</sql>
          <default_value/>
          <is_null_allowed>true</is_null_allowed>
        </field>
        <field id="location_id" xsi:type="AttributeExternalKey">
          <sql>location_id</sql>
          <filter><![CDATA[SELECT Location]]></filter>
          <dependencies/>
          <target_class>Location</target_class>
          <is_null_allowed>false</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="location_name" xsi:type="AttributeExternalField">
          <extkey_attcode>location_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
        <field id="location_org_id" xsi:type="AttributeExternalField">
          <extkey_attcode>location_id</extkey_attcode>
          <target_attcode>org_id</target_attcode>
        </field>
        <field id="rack_id" xsi:type="AttributeExternalKey">
          <sql>rack_id</sql>
          <target_class>Rack</target_class>
          <filter><![CDATA[SELECT Rack WHERE location_id = :this->location_id]]></filter>
          <dependencies>
            <attribute id="location_id"/>
          </dependencies>
          <is_null_allowed>true</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="rack_name" xsi:type="AttributeExternalField">
          <extkey_attcode>rack_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
        <field id="patchpanel_id" xsi:type="AttributeExternalKey">
          <sql>patchpanel_id</sql>
          <target_class>PatchPanel</target_class>
          <filter><![CDATA[SELECT PatchPanel WHERE rack_id = :this->rack_id]]></filter>
          <dependencies>
            <attribute id="rack_id"/>
          </dependencies>
          <is_null_allowed>true</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="patchpanel_name" xsi:type="AttributeExternalField">
          <extkey_attcode>patchpanel_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
        <field id="patchpanel_rack_name" xsi:type="AttributeExternalField">
          <extkey_attcode>patchpanel_id</extkey_attcode>
          <target_attcode>rack_name</target_attcode>
        </field>
        <field id="status" xsi:type="AttributeEnum">
          <values>
            <value id="active">
              <code>active</code>
							<style>
								<main_color>hsla(92, 47.9%, 42.2%, 1)</main_color>
								<complementary_color>hsla(0, 0%, 100%, 1)</complementary_color>
								<decoration_classes/>
							</style>
            </value>
            <value id="inactive">
              <code>inactive</code>
							<style>
								<main_color>hsla(33, 89.9%, 64.9%, 1)</main_color>
								<complementary_color>hsla(0, 0%, 100%, 1)</complementary_color>
								<decoration_classes/>
							</style>
            </value>
          </values>
          <sql>status</sql>
          <default_value>active</default_value>
          <is_null_allowed>true</is_null_allowed>
          <display_style>radio_horizontal</display_style>
        </field>
        <field id="comment" xsi:type="AttributeText">
          <sql>comment</sql>
          <default_value/>
          <is_null_allowed>true</is_null_allowed>
        </field>
        <field id="connectableci_id" xsi:type="AttributeExternalKey">
          <sql>connectableci_id</sql>
          <target_class>ConnectableCI</target_class>
          <is_null_allowed>true</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="connectableci_name" xsi:type="AttributeExternalField">
          <extkey_attcode>connectableci_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
        <field id="physicalinterface_id" xsi:type="AttributeExternalKey">
          <sql>physicalinterface_id</sql>
          <target_class>PhysicalInterface</target_class>
          <filter><![CDATA[SELECT PhysicalInterface WHERE connectableci_id = :this->connectableci_id]]></filter>
          <dependencies>
            <attribute id="connectableci_id"/>
          </dependencies>
          <is_null_allowed>true</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="physicalinterface_name" xsi:type="AttributeExternalField">
          <extkey_attcode>physicalinterface_id</extkey_attcode>
          <target_attcode>friendlyname</target_attcode>
        </field>
        <field id="networksocket_id" xsi:type="AttributeExternalKey">
          <sql>networksocket_id</sql>
          <target_class>NetworkSocket</target_class>
          <filter><![CDATA[SELECT NetworkSocket WHERE id != :this->id]]></filter>
          <dependencies/>
          <is_null_allowed>true</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="networksocket_name" xsi:type="AttributeExternalField">
          <extkey_attcode>networksocket_id</extkey_attcode>
          <target_attcode>friendlyname</target_attcode>
        </field>
        <field id="backendsocket_id" xsi:type="AttributeExternalKey">
          <sql>backendsocket_id</sql>
          <target_class>NetworkSocket</target_class>
          <filter><![CDATA[SELECT NetworkSocket WHERE id != :this->id]]></filter>
          <dependencies/>
          <is_null_allowed>true</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="backendsocket_name" xsi:type="AttributeExternalField">
          <extkey_attcode>backendsocket_id</extkey_attcode>
          <target_attcode>friendlyname</target_attcode>
        </field>
      </fields>
			<relations>
				<relation id="wiring">
					<neighbours>
						<neighbour id="networksocket">
              <attribute>networksocket_id</attribute>
              <direction>both</direction>
            </neighbour>
						<neighbour id="backendsocket">
              <attribute>backendsocket_id</attribute>
              <direction>both</direction>
            </neighbour>
						<neighbour id="physicalinterface">
              <attribute>physicalinterface_id</attribute>
              <direction>both</direction>
            </neighbour>
					</neighbours>
				</relation>
			</relations>
      <methods>
        <method id="ComputeValues">
          <comment/>
          <static>false</static>
          <access>public</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[	public function ComputeValues()
    {
        parent::ComputeValues();

        $sDelimiter = ' / ';
        $sLocationName = $this->Get('location_name');
        $iRackId = $this->Get('rack_id');
        if ($iRackId > 0) {
            $sRackName = $this->Get('rack_name');
            $iPatchPanelId = $this->Get('patchpanel_id');
            if ($iPatchPanelId > 0) {
                $sPatchPanelName = $this->Get('patchpanel_name');
                $sPosition = $sLocationName.$sDelimiter.$sRackName.$sDelimiter.$sPatchPanelName;
            } else {
                $sPosition = $sLocationName.$sDelimiter.$sRackName;
            }
        } else {
            $sPosition = $sLocationName;
        }
        $this->Set('name', $sPosition.$sDelimiter.$this->Get('code'));
	}]]></code>
        </method>
        <method id="DoCheckToWrite">
          <comment/>
          <static>false</static>
          <access>public</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[	public function DoCheckToWrite()
    {
        parent::DoCheckToWrite();

        $iRemoteNetworkSocket = $this->Get('networksocket_id');
        if ($iRemoteNetworkSocket > 0) {
            // Network socket cannot be connected to both a remote network socket and a connectableCI
            if ($this->Get('connectableci_id') > 0) {
                $this->m_aCheckIssues[] = Dict::Format('UI:CableManagement:Action:CreateOrUpdate:NetworkSocket:PointToDeviceAndSocket');
            }
            if (($this->Get('backendsocket_id') == $iRemoteNetworkSocket)) {
                $this->m_aCheckIssues[] = Dict::Format('UI:CableManagement:Action:CreateOrUpdate:NetworkSocket:PointToBackendAndSocket');
            }
        }
	}]]></code>
        </method>
      </methods>
      <presentation>
        <details>
          <items>
            <item id="col:col1">
              <rank>10</rank>
              <items>
                <item id="fieldset:Class:NetworkSocket:baseinfo">
                  <rank>10</rank>
                  <items>
                    <item id="code">
                      <rank>10</rank>
                    </item>
                    <item id="status">
                      <rank>20</rank>
                    </item>
                    <item id="location_id">
                      <rank>30</rank>
                    </item>
                    <item id="rack_id">
                      <rank>40</rank>
                    </item>
                    <item id="patchpanel_id">
                      <rank>50</rank>
                    </item>
                    <item id="comment">
                      <rank>60</rank>
                    </item>
                  </items>
                </item>
              </items>
            </item>
            <item id="col:col2">
              <rank>10</rank>
              <items>
                <item id="fieldset:Class:NetworkSocket:frontendinfo">
                  <rank>10</rank>
                  <items>
                    <item id="connectableci_id">
                      <rank>20</rank>
                    </item>
                    <item id="physicalinterface_id">
                      <rank>30</rank>
                    </item>
                    <item id="networksocket_id">
                      <rank>40</rank>
                    </item>
                  </items>
                </item>
                <item id="fieldset:Class:NetworkSocket:backendinfo">
                  <rank>20</rank>
                  <items>
                    <item id="backendsocket_id">
                      <rank>10</rank>
                    </item>
                  </items>
                </item>
             </items>
            </item>
         </items>
        </details>
        <list>
          <items>
            <item id="status">
              <rank>10</rank>
            </item>
            <item id="connectableci_id">
              <rank>20</rank>
            </item>
            <item id="physicalinterface_id">
              <rank>30</rank>
            </item>
            <item id="networksocket_id">
              <rank>40</rank>
            </item>
             <item id="backendsocket_id">
              <rank>50</rank>
            </item>
         </items>
        </list>
        <default_search>
          <items>
            <item id="name">
              <rank>10</rank>
            </item>
            <item id="status">
              <rank>20</rank>
            </item>
            <item id="connectableci_id">
              <rank>30</rank>
            </item>
            <item id="physicalinterface_id">
              <rank>40</rank>
            </item>
            <item id="networksocket_id">
              <rank>50</rank>
            </item>
            <item id="backendsocket_id">
              <rank>60</rank>
            </item>
            <item id="location_org_id">
              <rank>70</rank>
            </item>
         </items>
        </default_search>
        <search>
          <items>
            <item id="name">
              <rank>10</rank>
            </item>
            <item id="status">
              <rank>20</rank>
            </item>
          </items>
        </search>
      </presentation>
    </class>
    <class id="PatchPanel" _delta="define">
      <parent>PhysicalDevice</parent>
      <properties>
        <category>bizmodel,searchable,configmgmt</category>
        <abstract>false</abstract>
        <key_type>autoincrement</key_type>
        <db_table>patchpanel</db_table>
        <db_key_field>id</db_key_field>
        <db_final_class_field/>
        <naming>
          <attributes>
            <attribute id="name"/>
          </attributes>
        </naming>
        <style>
          <icon>assets/img/icons8-toolbar.svg</icon>
        </style>
        <reconciliation>
          <attributes>
            <attribute id="name"/>
            <attribute id="location_id"/>
            <attribute id="location_name"/>
            <attribute id="rack_id"/>
            <attribute id="rack_name"/>
          </attributes>
        </reconciliation>
        <uniqueness_rules/>
      </properties>
      <fields>
        <field id="rack_id" xsi:type="AttributeExternalKey">
          <sql>rack_id</sql>
          <target_class>Rack</target_class>
          <filter><![CDATA[SELECT Rack WHERE location_id = :this->location_id]]></filter>
          <dependencies>
            <attribute id="location_id"/>
          </dependencies>
          <is_null_allowed>false</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="rack_name" xsi:type="AttributeExternalField">
          <extkey_attcode>rack_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
        <field id="capacity" xsi:type="AttributeInteger">
          <sql>capacity</sql>
          <default_value/>
          <is_null_allowed>true</is_null_allowed>
        </field>
        <field id="networksockets_list" xsi:type="AttributeLinkedSet">
          <linked_class>NetworkSocket</linked_class>
          <ext_key_to_me>patchpanel_id</ext_key_to_me>
          <edit_mode>add_remove</edit_mode>
          <count_min>0</count_min>
          <count_max>0</count_max>
          <duplicates/>
        </field>
      </fields>
      <methods/>
      <presentation>
        <details>
          <items>
            <item id="networksockets_list">
              <rank>10</rank>
            </item>
            <item id="col:col1">
              <rank>20</rank>
              <items>
                <item id="fieldset:Class:PatchPanel:baseinfo">
                  <rank>10</rank>
                  <items>
                    <item id="name">
                      <rank>10</rank>
                    </item>
                    <item id="org_id">
                      <rank>20</rank>
                    </item>
                    <item id="status">
                      <rank>30</rank>
                    </item>
                    <item id="location_id">
                      <rank>40</rank>
                    </item>
                    <item id="rack_id">
                      <rank>50</rank>
                    </item>
                    <item id="description">
                      <rank>70</rank>
                    </item>
                  </items>
                </item>
              </items>
            </item>
            <item id="col:col2">
              <rank>30</rank>
              <items>
                <item id="fieldset:Class:PatchPanel:moreinfo">
                  <rank>10</rank>
                  <items>
                    <item id="capacity">
                      <rank>10</rank>
                    </item>
                  </items>
                </item>
              </items>
            </item>
         </items>
        </details>
        <list>
          <items>
            <item id="status">
              <rank>20</rank>
            </item>
            <item id="location_id">
              <rank>30</rank>
            </item>
            <item id="rack_id">
              <rank>40</rank>
            </item>
            <item id="capacity">
              <rank>50</rank>
            </item>
          </items>
        </list>
        <default_search>
          <items>
            <item id="name">
              <rank>10</rank>
            </item>
            <item id="status">
              <rank>20</rank>
            </item>
            <item id="location_id">
              <rank>30</rank>
            </item>
            <item id="rack_id">
              <rank>40</rank>
            </item>
            <item id="capacity">
              <rank>50</rank>
            </item>
          </items>
        </default_search>
        <search>
          <items>
            <item id="name">
              <rank>10</rank>
            </item>
            <item id="status">
              <rank>20</rank>
            </item>
          </items>
        </search>
      </presentation>
    </class>
    <class id="PhysicalInterface" _delta="must_exist">
      <fields>
        <field id="networksocket_id" xsi:type="AttributeExternalKey" _delta="define">
          <sql>networksocket_id</sql>
          <target_class>NetworkSocket</target_class>
          <filter><![CDATA[SELECT NetworkSocket WHERE networksocket_id = 0]]></filter>
          <dependencies/>
          <is_null_allowed>true</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="networksocket_name" xsi:type="AttributeExternalField" _delta="define">
          <extkey_attcode>networksocket_id</extkey_attcode>
          <target_attcode>friendlyname</target_attcode>
        </field>
      </fields>
			<relations>
				<relation id="wiring" _delta="define">
					<neighbours>
						<neighbour id="networksocket">
              <attribute>networksocket_id</attribute>
              <direction>both</direction>
            </neighbour>
						<neighbour id="connectableci">
              <attribute>connectableci_id</attribute>
              <direction>both</direction>
            </neighbour>
					</neighbours>
				</relation>
			</relations>
      <presentation>
        <details>
          <items>
            <item id="col:col1" _delta="must_exist">
              <items>
                <item id="fieldset:Class:NetworkInterface:baseinfo" _delta="must_exist">
                  <items>
                    <item id="networksocket_id" _delta="define">
                      <rank>32</rank>
                    </item>
                  </items>
                </item>
              </items>
            </item>
          </items>
        </details>
      </presentation>
    </class>
		<class id="ConnectableCI" _delta="must_exist">
			<relations>
				<relation id="wiring" _delta="define">
					<neighbours>
						<neighbour id="physicalinterface">
              <attribute>physicalinterface_list</attribute>
              <direction>down</direction>
            </neighbour>
					</neighbours>
				</relation>
			</relations>
    </class>
  </classes>
  <menus>
    <menu id="ConfigManagementOverview" xsi:type="DashboardMenuNode" _delta="must_exist">
      <definition>
        <cells>
          <cell id="teemip-000" _delta="must_exist">
            <dashlets>
              <dashlet id="teemip-0117" xsi:type="DashletBadge" _delta="define">
                <rank>1.7</rank>
                <class>PatchPanel</class>
              </dashlet>
              <dashlet id="teemip-0118" xsi:type="DashletBadge" _delta="define">
                <rank>1.8</rank>
                <class>NetworkSocket</class>
              </dashlet>
              <dashlet id="teemip-0119" xsi:type="DashletBadge" _delta="define">
                <rank>1.9</rank>
                <class>NetworkCable</class>
              </dashlet>
            </dashlets>
          </cell>
        </cells>
      </definition>
    </menu>
    <menu id="Typology" xsi:type="DashboardMenuNode" _delta="must_exist">
      <definition>
        <cells>
          <cell id="Network" _delta="must_exist">
            <rank>10</rank>
            <dashlets>
              <dashlet id="teemip-1111" xsi:type="DashletBadge" _delta="define">
                <rank>10</rank>
                <class>CableType</class>
              </dashlet>
              <dashlet id="teemip-1112" xsi:type="DashletBadge" _delta="define">
                <rank>11</rank>
                <class>CableCategory</class>
              </dashlet>
            </dashlets>
          </cell>
        </cells>
      </definition>
    </menu>
  </menus>
  <user_rights>
    <groups>
      <group id="Network" _delta="must_exist">
        <classes>
          <class id="PatchPanel" _delta="define"/>
          <class id="NetworkSocket" _delta="define"/>
        </classes>
      </group>
    </groups>
  </user_rights>
  <snippets>
    <snippet id="TeemIpCableMgmt" _delta="define">
      <placement>module</placement>
      <module>teemip-cable-mgmt</module>
      <rank>10</rank>
      <content><![CDATA[
use Combodo\iTop\Application\UI\Base\Component\MedallionIcon\MedallionIcon;
use TeemIp\TeemIp\Extension\Framework\Helper\IPUtils;

class TeemIpCableMgmt implements iApplicationUIExtension, iApplicationObjectExtension
{
	/**
	 * @inheritdoc
	 */
	public function OnDisplayProperties($oObject, WebPage $oPage, $bEditMode = false) {
	}

	/**
	 * @inheritdoc
	 */
	public function OnDisplayRelations($oObject, WebPage $oPage, $bEditMode = false) {
		if ($oObject instanceof PatchPanel) {
		    if (!$bEditMode) {
		        // Display network cable connected to a network socket that belong to the patch panel
		        $sOQL = "SELECT NetworkCable AS nc JOIN NetworkSocket AS ns ON nc.networksocket1_id = ns.id WHERE ns.patchpanel_id = :id
		           UNION SELECT NetworkCable AS nc JOIN NetworkSocket AS ns ON nc.networksocket2_id = ns.id WHERE ns.patchpanel_id = :id";
		        $oNetworkCableSet =  new CMDBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('id' => $oObject->GetKey()));
		        $iNbNetworkCables = $oNetworkCableSet->Count();
		        $sName = Dict::Format('Class:PatchPanel/Tab:cables_list');
		        $sTitle = Dict::Format('Class:PatchPanel/Tab:cables_list+');
		        if ($iNbNetworkCables > 0) {
		            $oPage->SetCurrentTab($sName.' ('.$iNbNetworkCables.')');
		            $oClassIcon = new MedallionIcon(MetaModel::GetClassIcon('NetworkCable', false));
		            $oClassIcon->SetDescription(Dict::Format('Class:PatchPanel/Tab:cables_list+', MetaModel::GetName('NetworkCable')))->AddCSSClass('ibo-block-list--medallion');
		            $oPage->AddUiBlock($oClassIcon);
		            $oBlock = new DisplayBlock($oNetworkCableSet->GetFilter(), 'list', false);
		            $oBlock->Display($oPage, 'networkcables_list', array('menu' => false));
		        } else {
		            $oSet = CMDBObjectSet::FromScratch('NetworkCable');
		            TeemIp\TeemIp\Extension\Framework\Helper\IPUtils::DisplayTabContent($oPage, $sName, 'networkcables_list', 'NetworkCable', $sTitle, '', $oSet);
		        }

		        // Display patch panel connected through the frontend interface of network sockets
		        $sOQL = "SELECT PatchPanel AS ppr JOIN NetworkSocket AS nsr ON nsr.patchpanel_id = ppr.id JOIN NetworkSocket AS nsl ON nsl.networksocket_id = nsr.id WHERE nsl.patchpanel_id = :id";
		        $oPatchPanelSet =  new CMDBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('id' => $oObject->GetKey()));
		        $iNbPanels = $oPatchPanelSet->Count();
		        $sName = Dict::Format('Class:PatchPanel/Tab:frontendpanels_list');
		        $sTitle = Dict::Format('Class:PatchPanel/Tab:frontendpanels_list+');
		        if ($iNbPanels > 0) {
				    $oPage->SetCurrentTab($sName.' ('.$iNbPanels.')');
				        $oClassIcon = new MedallionIcon(MetaModel::GetClassIcon('PatchPanel', false));
				        $oClassIcon->SetDescription(Dict::Format('Class:PatchPanel/Tab:frontendpanels_list+', MetaModel::GetName('PatchPanel')))->AddCSSClass('ibo-block-list--medallion');
				        $oPage->AddUiBlock($oClassIcon);
				        $oBlock = new DisplayBlock($oPatchPanelSet->GetFilter(), 'list', false);
				        $oBlock->Display($oPage, 'frontend_panels', array('menu' => false));
		        } else {
		            $oSet = CMDBObjectSet::FromScratch('PatchPanel');
		            TeemIp\TeemIp\Extension\Framework\Helper\IPUtils::DisplayTabContent($oPage, $sName, 'frontendpanels_list', 'PatchPanel', $sTitle, '', $oSet);
		        }

		        // Display patch panel connected through the backend interface of network sockets
		        $sOQL = "SELECT PatchPanel AS ppr JOIN NetworkSocket AS nsr ON nsr.patchpanel_id = ppr.id JOIN NetworkSocket AS nsl ON nsl.backendsocket_id = nsr.id WHERE nsl.patchpanel_id = :id";
		        $oPatchPanelSet =  new CMDBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('id' => $oObject->GetKey()));
		        $iNbPanels = $oPatchPanelSet->Count();
		        $sName = Dict::Format('Class:PatchPanel/Tab:backendpanels_list');
		        $sTitle = Dict::Format('Class:PatchPanel/Tab:backendpanels_list+');
		        if ($iNbPanels > 0) {
		            $oPage->SetCurrentTab($sName.' ('.$iNbPanels.')');
		            $oClassIcon = new MedallionIcon(MetaModel::GetClassIcon('PatchPanel', false));
		            $oClassIcon->SetDescription($sTitle)->AddCSSClass('ibo-block-list--medallion');
		            $oPage->AddUiBlock($oClassIcon);
		            $oBlock = new DisplayBlock($oPatchPanelSet->GetFilter(), 'list', false);
		            $oBlock->Display($oPage, 'backend_panels', array('menu' => false));
		        } else {
		            $oSet = CMDBObjectSet::FromScratch('PatchPanel');
		            TeemIp\TeemIp\Extension\Framework\Helper\IPUtils::DisplayTabContent($oPage, $sName, 'backendpanels_list', 'PatchPanel', $sTitle, '', $oSet);
		        }
		    }
		} elseif ($oObject instanceof NetworkSocket) {
			if (!$bEditMode) {
		        // Display network cable connected to a network socket that belong to the patch panel
		        $sOQL = "SELECT NetworkCable AS nc WHERE nc.networksocket1_id = :id OR nc.networksocket2_id = :id";
		        $oNetworkCableSet =  new CMDBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('id' => $oObject->GetKey()));
		        $iNbNetworkCables = $oNetworkCableSet->Count();
		        $sName = Dict::Format('Class:NetworkSocket/Tab:cables_list');
		        $sTitle = Dict::Format('Class:NetworkSocket/Tab:cables_list+');
		        if ($iNbNetworkCables > 0) {
		            $oPage->SetCurrentTab($sName.' ('.$iNbNetworkCables.')');
		            $oClassIcon = new MedallionIcon(MetaModel::GetClassIcon('NetworkCable', false));
		            $oClassIcon->SetDescription(Dict::Format('Class:NetworkSocket/Tab:cables_list+', MetaModel::GetName('NetworkCable')))->AddCSSClass('ibo-block-list--medallion');
		            $oPage->AddUiBlock($oClassIcon);
		            $oBlock = new DisplayBlock($oNetworkCableSet->GetFilter(), 'list', false);
		            $oBlock->Display($oPage, 'networkcables_list', array('menu' => false));
		        } else {
		            $oSet = CMDBObjectSet::FromScratch('NetworkCable');
		            TeemIp\TeemIp\Extension\Framework\Helper\IPUtils::DisplayTabContent($oPage, $sName, 'networkcables_list', 'NetworkCable', $sTitle, '', $oSet);
		        }

				// Remove menu Relation:wiring/UpStream that is equivalent to Relation:wiring/DownStream
				$oPage->add_linked_stylesheet(utils::GetAbsoluteUrlModulesRoot().'teemip-cable-mgmt/assets/css/hide-wiring-up-action.css');
			}
		} elseif (($oObject instanceof ConnectableCI) || ($oObject instanceof PhysicalInterface)) {
			if (!$bEditMode) {
				// Remove menu Relation:wiring/UpStream that is equivalent to Relation:wiring/DownStream
				$oPage->add_linked_stylesheet(utils::GetAbsoluteUrlModulesRoot().'teemip-cable-mgmt/assets/css/hide-wiring-up-action.css');
			}
		}
	}

	/**
	 * @inheritdoc
	 */
	public function OnFormSubmit($oObject, $sFormPrefix = '') {
	}

	/**
	 * @inheritdoc
	 */
	public function OnFormCancel($sTempId) {
	}

	/**
	 * @inheritdoc
	 */
	public function EnumUsedAttributes($oObject) {
		return array();
	}

	/**
	 * @inheritdoc
	 */
	public function GetIcon($oObject) {
		return '';
	}

	/**
	 * @inheritdoc
	 */
	public function GetHilightClass($oObject) {
		return 0;
	}

	/**
	 * @inheritdoc
	 */
	public function EnumAllowedActions(DBObjectSet $oSet) {
		return array();
	}

	/**
	 * @inheritdoc
	 */
	public function OnIsModified($oObject) {
	}

	/**
	 * @inheritdoc
	 */
	public function OnCheckToWrite($oObject) {
	}

	/**
	 * @inheritdoc
	 */
	public function OnCheckToDelete($oObject) {
	}

	/**
	 * @inheritdoc
	 */
	public function OnDBInsert($oObject, $oChange = null) {
		$sClass = get_class($oObject);
		if ($sClass == 'NetworkSocket') {
			if ($oObject->Get('physicalinterface_id') > 0) {
				// Set network socket at remote physical interface
				$oPhysicalInterface = MetaModel::GetObject('PhysicalInterface', $oObject->Get('physicalinterface_id'), false);
				if ($oPhysicalInterface) {
					$oPhysicalInterface->Set('networksocket_id', $oObject->GetKey());
					$oPhysicalInterface->DBUpdate();
				}
			}
			if ($oObject->Get('networksocket_id') > 0) {
				// Set network socket at remote network socket
				$oRemoteNetworkSocket = MetaModel::GetObject('NetworkSocket', $oObject->Get('networksocket_id'), false);
				if ($oRemoteNetworkSocket) {
					$oRemoteNetworkSocket->Set('networksocket_id', $oObject->GetKey());
					$oRemoteNetworkSocket->DBUpdate();
				}
			}
			if ($oObject->Get('backendsocket_id') > 0) {
				// Set network socket at remote backend socket
				$oRemoteBackendSocket = MetaModel::GetObject('NetworkSocket', $oObject->Get('backendsocket_id'), false);
				if ($oRemoteBackendSocket) {
					$oRemoteBackendSocket->Set('backendsocket_id', $oObject->GetKey());
					$oRemoteBackendSocket->DBUpdate();
				}
			}
		} elseif ($sClass == 'PhysicalInterface') {
			if ($oObject->Get('networksocket_id') > 0) {
				// Set physical interface at remote network socket
				$oNetworkSocket = MetaModel::GetObject('NetworkSocket', $oObject->Get('networksocket_id'), false);
				if ($oNetworkSocket) {
					$oNetworkSocket->Set('connectableci_id', $oObject->Get('connectableci_id'));
					$oNetworkSocket->Set('physicalinterface_id', $oObject->GetKey());
					$oNetworkSocket->DBUpdate();
				}
			}
		}
	}

	/**
	 * @inheritdoc
	 */
	public function OnDBUpdate($oObject, $oChange = null) {
		$sClass = get_class($oObject);
		if ($sClass == 'NetworkSocket') {
			$aChanges = $oObject->ListPreviousValuesForUpdatedAttributes();
			if (array_key_exists('physicalinterface_id', $aChanges)) {
				if ($oObject->Get('physicalinterface_id') > 0) {
					// Set network socket at new remote physical interface
					$oPhysicalInterface = MetaModel::GetObject('PhysicalInterface', $oObject->Get('physicalinterface_id'), false);
					if ($oPhysicalInterface) {
						$oPhysicalInterface->Set('networksocket_id', $oObject->GetKey());
						$oPhysicalInterface->DBUpdate();
					}
				}
				if ($aChanges['physicalinterface_id'] > 0) {
					// Reset network socket at old remote physical interface
					$oOldPhysicalInterface = MetaModel::GetObject('PhysicalInterface', $aChanges['physicalinterface_id'], false);
					if ($oOldPhysicalInterface && ($oOldPhysicalInterface->Get('networksocket_id') == $oObject->GetKey())) {
						$oOldPhysicalInterface->Set('networksocket_id', 0);
						$oOldPhysicalInterface->DBUpdate();
					}
				}
			}
			if (array_key_exists('networksocket_id', $aChanges)) {
				if ($oObject->Get('networksocket_id') > 0) {
					// Set network socket at new remote network socket
					$oRemoteNetworkSocket = MetaModel::GetObject('NetworkSocket', $oObject->Get('networksocket_id'), false);
					if ($oRemoteNetworkSocket) {
						$oRemoteNetworkSocket->Set('networksocket_id', $oObject->GetKey());
						$oRemoteNetworkSocket->DBUpdate();
					}
				}
				if ($aChanges['networksocket_id'] > 0) {
					// Reset network socket at old remote network socket
					$oOldRemoteNetworkSocket = MetaModel::GetObject('NetworkSocket', $aChanges['networksocket_id'], false);
					if ($oOldRemoteNetworkSocket && ($oOldRemoteNetworkSocket->Get('networksocket_id') == $oObject->GetKey())) {
						$oOldRemoteNetworkSocket->Set('networksocket_id', 0);
						$oOldRemoteNetworkSocket->DBUpdate();
					}
				}

				// Update the cable that includes the network socket
				$sOQL = "SELECT NetworkCable WHERE networksocket1_id = :id OR networksocket2_id = :id";
				$iId = $oObject->GetKey();
				$oNetworkCableSet =  new CMDBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('id' => $iId));
				while ($oNetworkCable = $oNetworkCableSet->Fetch()) {
					if ($oObject->Get('networksocket_id') == 0) {
						$oNetworkCable->DBDelete();
					} else {
						if ($oNetworkCable->Get('networksocket1_id') == $iId) {
							$oNetworkCable->Set('networksocket2_id', $oObject->Get('networksocket_id'));
						} else {
							$oNetworkCable->Set('networksocket1_id', $oObject->Get('networksocket_id'));
						}
						$oNetworkCable->DBUpdate();
					}
				}
			}
			if (array_key_exists('backendsocket_id', $aChanges)) {
				if ($oObject->Get('backendsocket_id') > 0) {
					// Set network socket at new remote backend socket
					$oRemoteBackendSocket = MetaModel::GetObject('NetworkSocket', $oObject->Get('backendsocket_id'), false);
					if ($oRemoteBackendSocket) {
						$oRemoteBackendSocket->Set('backendsocket_id', $oObject->GetKey());
						$oRemoteBackendSocket->DBUpdate();
					}
				}
				if ($aChanges['backendsocket_id'] > 0) {
					// Reset network socket at old remote backend socket
					$oOldRemoteeBackendSocket = MetaModel::GetObject('NetworkSocket', $aChanges['backendsocket_id'], false);
					if ($oOldRemoteeBackendSocket && ($oOldRemoteeBackendSocket->Get('backendsocket_id') == $oObject->GetKey())) {
						$oOldRemoteeBackendSocket->Set('backendsocket_id', 0);
						$oOldRemoteeBackendSocket->DBUpdate();
					}
				}
			}
		} elseif ($sClass == 'PhysicalInterface') {
			$aChanges = $oObject->ListPreviousValuesForUpdatedAttributes();
			if (array_key_exists('networksocket_id', $aChanges)) {
				if ($oObject->Get('networksocket_id') > 0) {
					// Set physical interface at new remote network socket
					$oNetworkSocket = MetaModel::GetObject('NetworkSocket', $oObject->Get('networksocket_id'), false);
					if ($oNetworkSocket) {
						$oNetworkSocket->Set('connectableci_id', $oObject->Get('connectableci_id'));
						$oNetworkSocket->Set('physicalinterface_id', $oObject->GetKey());
						$oNetworkSocket->DBUpdate();
					}
				}
				if ($aChanges['networksocket_id'] > 0) {
					// Reset physical interface at old remote network socket
					$oOldNetworkSocket = MetaModel::GetObject('NetworkSocket', $aChanges['networksocket_id'], false);
					if ($oOldNetworkSocket && ($oOldNetworkSocket->Get('physicalinterface_id') == $oObject->GetKey())) {
						$oOldNetworkSocket->Set('connectableci_id', 0);
						$oOldNetworkSocket->Set('physicalinterface_id', 0);
						$oOldNetworkSocket->DBUpdate();
					}
				}
			}
		} elseif (($sClass == 'Location') || ($sClass == 'Rack') || ($sClass == 'PatchPanel')) {
			$aChanges = $oObject->ListPreviousValuesForUpdatedAttributes();
			if (array_key_exists('name', $aChanges)) {
				// Propagate name change to impacted network socket
				switch ($sClass) {
					case 'Location':
						$sAttribute = 'location_id';
						break;

					case 'Rack':
						$sAttribute = 'rack_id';
						break;

					case 'PatchPanel':
						$sAttribute = 'patchpanel_id';
						break;
				}
				$sOQL = "SELECT NetworkSocket WHERE $sAttribute = :id";
				$oNetworkSocketSet =  new CMDBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('id' => $oObject->GetKey()));
				while ($oNetworkSocket = $oNetworkSocketSet->Fetch()) {
					$oNetworkSocket->ComputeValues();
					$oNetworkSocket->DBUpdate();
				}
			}
		}
	}

	/**
	 * @inheritdoc
	 */
	public function OnDBDelete($oObject, $oChange = null) {
		$sClass = get_class($oObject);
		if ($sClass == 'NetworkSocket') {
			if ($oObject->Get('physicalinterface_id') > 0) {
				// Reset network socket at remote physical interface
				$oPhysicalInterface = MetaModel::GetObject('PhysicalInterface', $oObject->Get('physicalinterface_id'), false);
				if ($oPhysicalInterface) {
					$oPhysicalInterface->Set('networksocket_id', 0);
					$oPhysicalInterface->DBUpdate();
				}
			}
			if ($oObject->Get('networksocket_id') > 0) {
				// Reset network socket at remote network socket
				$oRemoteNetworkSocket = MetaModel::GetObject('NetworkSocket', $oObject->Get('networksocket_id'), false);
				if ($oRemoteNetworkSocket) {
					$oRemoteNetworkSocket->Set('networksocket_id', 0);
					$oRemoteNetworkSocket->DBUpdate();
				}
			}
			if ($oObject->Get('backendsocket_id') > 0) {
				// Reset network socket at remote backend socket
				$oRemoteBackendSocket = MetaModel::GetObject('NetworkSocket', $oObject->Get('backendsocket_id'), false);
				if ($oRemoteBackendSocket) {
					$oRemoteBackendSocket->Set('backendsocket_id', 0);
					$oRemoteBackendSocket->DBUpdate();
				}
			}
		} elseif ($sClass == 'PhysicalInterface') {
			if ($oObject->Get('networksocket_id') > 0) {
				// Reset physical interface at remote network socket
				$oNetworkSocket = MetaModel::GetObject('NetworkSocket', $oObject->Get('networksocket_id'), false);
				if ($oNetworkSocket) {
					$oOldNetworkSocket->Set('connectableci_id', 0);
					$oNetworkSocket->Set('physicalinterface_id', 0);
					$oNetworkSocket->DBUpdate();
				}
			}
		}
	}
}]]></content>
    </snippet>
  </snippets>
</itop_design>

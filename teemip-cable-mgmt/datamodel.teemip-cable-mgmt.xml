<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.6">
  <constants>
  </constants>
  <classes>
    <class id="PatchPanel" _delta="define">
      <parent>PhysicalDevice</parent>
      <properties>
        <category>bizmodel,searchable,configmgmt</category>
        <abstract>false</abstract>
        <key_type>autoincrement</key_type>
        <db_table>patchpanel</db_table>
        <db_key_field>id</db_key_field>
        <db_final_class_field/>
        <naming>
          <attributes>
            <attribute id="name"/>
          </attributes>
        </naming>
        <icon></icon>
        <reconciliation>
          <attributes>
            <attribute id="name"/>
            <attribute id="location_id"/>
            <attribute id="rack_id"/>
          </attributes>
        </reconciliation>
        <uniqueness_rules/>
      </properties>
      <fields>
        <field id="rack_id" xsi:type="AttributeExternalKey">
          <sql>rack_id</sql>
          <target_class>Rack</target_class>
          <filter><![CDATA[SELECT Rack WHERE location_id = :this->location_id]]></filter>
          <dependencies>
            <attribute id="location_id"/>
          </dependencies>
          <is_null_allowed>false</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="rack_name" xsi:type="AttributeExternalField">
          <extkey_attcode>rack_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
        <field id="networksockets_list" xsi:type="AttributeLinkedSet" _delta="define">
          <linked_class>NetworkSocket</linked_class>
          <ext_key_to_me>patchpanel_id</ext_key_to_me>
          <edit_mode>add_only</edit_mode>
          <count_min>0</count_min>
          <count_max>0</count_max>
          <duplicates/>
        </field>
      </fields>
      <methods/>
      <presentation>
        <details>
          <items>
            <item id="networksockets_list">
              <rank>10</rank>
            </item>
            <item id="col:col1">
              <rank>20</rank>
              <items>
                <item id="fieldset:Class:PatchPanel:baseinfo">
                  <rank>10</rank>
                  <items>
                    <item id="name">
                      <rank>10</rank>
                    </item>
                    <item id="org_id">
                      <rank>20</rank>
                    </item>
                    <item id="status">
                      <rank>30</rank>
                    </item>
                    <item id="location_id">
                      <rank>40</rank>
                    </item>
                    <item id="rack_id">
                      <rank>50</rank>
                    </item>
                    <item id="description">
                      <rank>70</rank>
                    </item>
                  </items>
                </item>
              </items>
            </item>
            <item id="col:col2">
              <rank>30</rank>
              <items>
                <item id="fieldset:Class:PatchPanel:moreinfo">
                  <rank>10</rank>
                  <items>
                  </items>
                </item>
              </items>
            </item>
         </items>
        </details>
        <list>
          <items>
            <item id="name">
              <rank>10</rank>
            </item>
            <item id="status">
              <rank>20</rank>
            </item>
          </items>
        </list>
        <default_search>
          <items>
            <item id="name">
              <rank>10</rank>
            </item>
            <item id="status">
              <rank>20</rank>
            </item>
          </items>
        </default_search>
        <search>
          <items>
            <item id="name">
              <rank>10</rank>
            </item>
            <item id="status">
              <rank>20</rank>
            </item>
          </items>
        </search>
      </presentation>
    </class>
    <class id="NetworkSocket" _delta="define">
      <parent>NetworkInterface</parent>
      <properties>
        <category>bizmodel,searchable,configmgmt</category>
        <abstract>false</abstract>
        <key_type>autoincrement</key_type>
        <db_table>networksocket</db_table>
        <db_key_field>id</db_key_field>
        <db_final_class_field/>
        <naming>
          <attributes>
            <attribute id="name"/>
          </attributes>
        </naming>
        <icon>assets/img/icons8-wired-network.svg</icon>
        <reconciliation>
          <attributes>
            <attribute id="name"/>
            <attribute id="location_id"/>
            <attribute id="rack_id"/>
            <attribute id="patchpanel_id"/>
          </attributes>
        </reconciliation>
        <uniqueness_rules/>
      </properties>
      <fields>
        <field id="code" xsi:type="AttributeString">
          <sql>code</sql>
          <default_value/>
          <is_null_allowed>true</is_null_allowed>
        </field>
        <field id="location_id" xsi:type="AttributeExternalKey">
          <sql>location_id</sql>
          <filter><![CDATA[SELECT Location]]></filter>
          <dependencies/>
          <target_class>Location</target_class>
          <is_null_allowed>false</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="location_name" xsi:type="AttributeExternalField">
          <extkey_attcode>location_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
        <field id="rack_id" xsi:type="AttributeExternalKey">
          <sql>rack_id</sql>
          <target_class>Rack</target_class>
          <filter><![CDATA[SELECT Rack WHERE location_id = :this->location_id]]></filter>
          <dependencies>
            <attribute id="location_id"/>
          </dependencies>
          <is_null_allowed>true</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="rack_name" xsi:type="AttributeExternalField">
          <extkey_attcode>rack_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
        <field id="patchpanel_id" xsi:type="AttributeExternalKey">
          <sql>patchpanel_id</sql>
          <target_class>PatchPanel</target_class>
          <filter><![CDATA[SELECT PatchPanel WHERE rack_id = :this->rack_id]]></filter>
          <dependencies>
            <attribute id="rack_id"/>
          </dependencies>
          <is_null_allowed>true</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="patchpanel_name" xsi:type="AttributeExternalField">
          <extkey_attcode>patchpanel_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
        <field id="status" xsi:type="AttributeEnum">
          <values>
            <value id="active">active</value>
            <value id="inactive">inactive</value>
          </values>
          <sql>status</sql>
          <default_value>active</default_value>
          <is_null_allowed>true</is_null_allowed>
          <display_style>radio_horizontal</display_style>
        </field>
        <field id="comment" xsi:type="AttributeText">
          <sql>comment</sql>
          <default_value/>
          <is_null_allowed>true</is_null_allowed>
        </field>
        <field id="connectableci_id" xsi:type="AttributeExternalKey">
          <sql>connectableci_id</sql>
          <target_class>ConnectableCI</target_class>
          <is_null_allowed>true</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="connectableci_name" xsi:type="AttributeExternalField">
          <extkey_attcode>connectableci_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
        <field id="physicalinterface_id" xsi:type="AttributeExternalKey">
          <sql>physicalinterface_id</sql>
          <target_class>PhysicalInterface</target_class>
          <filter><![CDATA[SELECT PhysicalInterface WHERE connectableci_id = :this->connectableci_id]]></filter>
          <dependencies>
            <attribute id="connectableci_id"/>
          </dependencies>
          <is_null_allowed>true</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="physicalinterface_name" xsi:type="AttributeExternalField">
          <extkey_attcode>physicalinterface_id</extkey_attcode>
          <target_attcode>friendlyname</target_attcode>
        </field>
        <field id="networksocket_id" xsi:type="AttributeExternalKey">
          <sql>networksocket_id</sql>
          <target_class>NetworkSocket</target_class>
          <filter><![CDATA[SELECT NetworkSocket WHERE id != :this->id]]></filter>
          <dependencies/>
          <is_null_allowed>true</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="networksocket_name" xsi:type="AttributeExternalField">
          <extkey_attcode>networksocket_id</extkey_attcode>
          <target_attcode>friendlyname</target_attcode>
        </field>
      </fields>
      <methods>
        <method id="ComputeValues">
          <comment/>
          <static>false</static>
          <access>public</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[	public function ComputeValues()
    {
        parent::ComputeValues();

        $sDelimiter = ' / ';
        $sLocationName = $this->Get('location_name');
        $iRackId = $this->Get('rack_id');
        if ($iRackId > 0) {
            $sRackName = $this->Get('rack_name');
            $iPatchPanelId = $this->Get('patchpanel_id');
            if ($iPatchPanelId > 0) {
                $sPatchPanelName = $this->Get('patchpanel_name');
                $sPosition = $sLocationName.$sDelimiter.$sRackName.$sDelimiter.$sPatchPanelName;
            } else {
                $sPosition = $sLocationName.$sDelimiter.$sRackName;
            }
        } else {
            $sPosition = $sLocationName;
        }
        $this->Set('name', $sPosition.$sDelimiter.$this->Get('code'));
	}]]></code>
        </method>
        <method id="DoCheckToWrite">
          <comment/>
          <static>false</static>
          <access>public</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[	public function DoCheckToWrite()
    {
        parent::DoCheckToWrite();

		if (($this->Get('physicalinterface_id') > 0) && ($this->Get('networksocket_id') > 0)) {
			$this->m_aCheckIssues[] = Dict::Format('UI:CableManagement:Action:CreateOrUpdate:NetworkSocket:PointToDeviceAndSocket');
		}
	}]]></code>
        </method>
      </methods>
      <presentation>
        <details>
          <items>
            <item id="col:col1">
              <rank>10</rank>
              <items>
                <item id="fieldset:Class:NetworkSocket:baseinfo">
                  <rank>10</rank>
                  <items>
                    <item id="code">
                      <rank>10</rank>
                    </item>
                    <item id="status">
                      <rank>20</rank>
                    </item>
                    <item id="location_id">
                      <rank>30</rank>
                    </item>
                    <item id="rack_id">
                      <rank>40</rank>
                    </item>
                    <item id="patchpanel_id">
                      <rank>50</rank>
                    </item>
                    <item id="comment">
                      <rank>60</rank>
                    </item>
                  </items>
                </item>
              </items>
            </item>
            <item id="col:col2">
              <rank>10</rank>
              <items>
                <item id="fieldset:Class:NetworkSocket:connectableciinfo">
                  <rank>10</rank>
                  <items>
                    <item id="connectableci_id">
                      <rank>10</rank>
                    </item>
                    <item id="physicalinterface_id">
                      <rank>20</rank>
                    </item>
                  </items>
                </item>
                <item id="fieldset:Class:NetworkSocket:networksocketinfo">
                  <rank>20</rank>
                  <items>
                    <item id="networksocket_id">
                      <rank>10</rank>
                    </item>
                  </items>
                </item>
              </items>
            </item>
         </items>
        </details>
        <list>
          <items>
            <item id="name">
              <rank>10</rank>
            </item>
            <item id="status">
              <rank>20</rank>
            </item>
            <item id="connectableci_id">
              <rank>30</rank>
            </item>
            <item id="physicalinterface_id">
              <rank>40</rank>
            </item>
            <item id="networksocket_id">
              <rank>50</rank>
            </item>
          </items>
        </list>
        <default_search>
          <items>
            <item id="name">
              <rank>10</rank>
            </item>
            <item id="status">
              <rank>20</rank>
            </item>
            <item id="connectableci_id">
              <rank>30</rank>
            </item>
            <item id="physicalinterface_id">
              <rank>40</rank>
            </item>
            <item id="networksocket_id">
              <rank>50</rank>
            </item>
          </items>
        </default_search>
        <search>
          <items>
            <item id="name">
              <rank>10</rank>
            </item>
            <item id="status">
              <rank>20</rank>
            </item>
          </items>
        </search>
      </presentation>
    </class>
    <class id="PhysicalInterface" _delta="must_exist">
      <fields>
        <field id="networksocket_id" xsi:type="AttributeExternalKey" _delta="define">
          <sql>networksocket_id</sql>
          <target_class>NetworkSocket</target_class>
          <filter><![CDATA[SELECT NetworkSocket WHERE networksocket_id = 0]]></filter>
          <dependencies/>
          <is_null_allowed>true</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="networksocket_name" xsi:type="AttributeExternalField" _delta="define">
          <extkey_attcode>networksocket_id</extkey_attcode>
          <target_attcode>friendlyname</target_attcode>
        </field>
      </fields>
      <presentation>
        <details>
          <items>
            <item id="col:col1" _delta="must_exist">
              <items>
                <item id="fieldset:Class:NetworkInterface:baseinfo" _delta="must_exist">
                  <items>
                    <item id="networksocket_id" _delta="define">
                      <rank>32</rank>
                    </item>
                  </items>
                </item>
              </items>
            </item>
          </items>
        </details>
      </presentation>
    </class>
  </classes>
  <menus>
  </menus>
  <user_rights>
    <groups>
    </groups>
    <profiles>
    </profiles>
  </user_rights>
  <snippets>
    <snippet id="TeemIpCableMgmt" _delta="define">
      <placement>module</placement>
      <module>teemip-cable-mgmt</module>
      <rank>10</rank>
      <content><![CDATA[
class TeemIpCableMgmt implements iApplicationObjectExtension
{
	/**
	 * @inheritdoc
	 */
	public function OnIsModified($oObject) {
	}

	/**
	 * @inheritdoc
	 */
	public function OnCheckToWrite($oObject) {
	}

	/**
	 * @inheritdoc
	 */
	public function OnCheckToDelete($oObject) {
	}

	/**
	 * @inheritdoc
	 */
	public function OnDBInsert($oObject, $oChange = null) {
		$sClass = get_class($oObject);
		if ($sClass == 'NetworkSocket') {
			if ($oObject->Get('physicalinterface_id') > 0) {
				$oPhysicalInterface = MetaModel::GetObject('PhysicalInterface', $oObject->Get('physicalinterface_id'), false);
				if ($oPhysicalInterface) {
					$oPhysicalInterface->Set('networksocket_id', $oObject->GetKey());
					$oPhysicalInterface->DBUpdate();
				}
			} elseif ($oObject->Get('networksocket_id') > 0) {
				$oRemoteNetworkSocket = MetaModel::GetObject('NetworkSocket', $oObject->Get('networksocket_id'), false);
				if ($oRemoteNetworkSocket) {
					$oRemoteNetworkSocket->Set('networksocket_id', $oObject->GetKey());
					$oRemoteNetworkSocket->DBUpdate();
				}
			}
		} elseif ($sClass == 'PhysicalInterface') {
			if ($oObject->Get('networksocket_id') > 0) {
				$oNetworkSocket = MetaModel::GetObject('NetworkSocket', $oObject->Get('networksocket_id'), false);
				if ($oNetworkSocket) {
					$oNetworkSocket->Set('connectableci_id', $oObject->Get('connectableci_id'));
					$oNetworkSocket->Set('physicalinterface_id', $oObject->GetKey());
					$oNetworkSocket->DBUpdate();
				}
			}
		}
	}

	/**
	 * @inheritdoc
	 */
	public function OnDBUpdate($oObject, $oChange = null) {
		$sClass = get_class($oObject);
		if ($sClass == 'NetworkSocket') {
			$aChanges = $oObject->ListPreviousValuesForUpdatedAttributes();
			if (array_key_exists('physicalinterface_id', $aChanges)) {
				if ($oObject->Get('physicalinterface_id') > 0) {
					$oPhysicalInterface = MetaModel::GetObject('PhysicalInterface', $oObject->Get('physicalinterface_id'), false);
					if ($oPhysicalInterface) {
						$oPhysicalInterface->Set('networksocket_id', $oObject->GetKey());
						$oPhysicalInterface->DBUpdate();
					}
				}
				if ($aChanges['physicalinterface_id'] > 0) {
					$oOldPhysicalInterface = MetaModel::GetObject('PhysicalInterface', $aChanges['physicalinterface_id'], false);
					if ($oOldPhysicalInterface && ($oOldPhysicalInterface->Get('networksocket_id') == $oObject->GetKey())) {
						$oOldPhysicalInterface->Set('networksocket_id', 0);
						$oOldPhysicalInterface->DBUpdate();
					}
				}
			}
			if (array_key_exists('networksocket_id', $aChanges)) {
				if ($oObject->Get('networksocket_id') > 0) {
					$oRemoteNetworkSocket = MetaModel::GetObject('NetworkSocket', $oObject->Get('networksocket_id'), false);
					if ($oRemoteNetworkSocket) {
						$oRemoteNetworkSocket->Set('networksocket_id', $oObject->GetKey());
						$oRemoteNetworkSocket->DBUpdate();
					}
				}
				if ($aChanges['networksocket_id'] > 0) {
					$oOldRemoteNetworkSocket = MetaModel::GetObject('NetworkSocket', $aChanges['networksocket_id'], false);
					if ($oOldRemoteNetworkSocket && ($oOldRemoteNetworkSocket->Get('networksocket_id') == $oObject->GetKey())) {
						$oOldRemoteNetworkSocket->Set('networksocket_id', 0);
						$oOldRemoteNetworkSocket->DBUpdate();
					}
				}
			}
		} elseif ($sClass == 'PhysicalInterface') {
			$aChanges = $oObject->ListPreviousValuesForUpdatedAttributes();
			if (array_key_exists('networksocket_id', $aChanges)) {
				if ($oObject->Get('networksocket_id') > 0) {
					$oNetworkSocket = MetaModel::GetObject('NetworkSocket', $oObject->Get('networksocket_id'), false);
					if ($oNetworkSocket) {
						$oNetworkSocket->Set('connectableci_id', $oObject->Get('connectableci_id'));
						$oNetworkSocket->Set('physicalinterface_id', $oObject->GetKey());
						$oNetworkSocket->DBUpdate();
					}
				}
				if ($aChanges['networksocket_id'] > 0) {
					$oOldNetworkSocket = MetaModel::GetObject('NetworkSocket', $aChanges['networksocket_id'], false);
					if ($oOldNetworkSocket && ($oOldNetworkSocket->Get('physicalinterface_id') == $oObject->GetKey())) {
						$oOldNetworkSocket->Set('connectableci_id', 0);
						$oOldNetworkSocket->Set('physicalinterface_id', 0);
						$oOldNetworkSocket->DBUpdate();
					}
				}
			}
		}
	}

	/**
	 * @inheritdoc
	 */
	public function OnDBDelete($oObject, $oChange = null) {
		$sClass = get_class($oObject);
		if ($sClass == 'NetworkSocket') {
			if ($oObject->Get('physicalinterface_id') > 0) {
				$oPhysicalInterface = MetaModel::GetObject('PhysicalInterface', $oObject->Get('physicalinterface_id'), false);
				if ($oPhysicalInterface) {
					$oPhysicalInterface->Set('networksocket_id', 0);
					$oPhysicalInterface->DBUpdate();
				}
			} elseif ($oObject->Get('networksocket_id') > 0) {
				$oRemoteNetworkSocket = MetaModel::GetObject('NetworkSocket', $oObject->Get('networksocket_id'), false);
				if ($oRemoteNetworkSocket) {
					$oRemoteNetworkSocket->Set('networksocket_id', 0);
					$oRemoteNetworkSocket->DBUpdate();
				}
			}
		} elseif ($sClass == 'PhysicalInterface') {
			if ($oObject->Get('networksocket_id') > 0) {
				$oNetworkSocket = MetaModel::GetObject('NetworkSocket', $oObject->Get('networksocket_id'), false);
				if ($oNetworkSocket) {
					$oOldNetworkSocket->Set('connectableci_id', 0);
					$oNetworkSocket->Set('physicalinterface_id', 0);
					$oNetworkSocket->DBUpdate();
				}
			}
		}
	}
}]]></content>
    </snippet>
  </snippets>

</itop_design>
